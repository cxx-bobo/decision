// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decision.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "decision.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace roborts_decision {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* EscapeConstraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EscapeConstraint_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchConstraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchConstraint_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhirlVel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhirlVel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Referee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Referee_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicName_reflection_ = NULL;
const ::google::protobuf::Descriptor* DecisionConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecisionConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PunishInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PunishInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_RunStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MutualInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutualInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_decision_2eproto() {
  protobuf_AddDesc_decision_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "decision.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, yaw_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  EscapeConstraint_descriptor_ = file->message_type(1);
  static const int EscapeConstraint_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, left_x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, right_x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, robot_x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, left_random_min_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, left_random_max_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, right_random_min_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, right_random_max_x_),
  };
  EscapeConstraint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EscapeConstraint_descriptor_,
      EscapeConstraint::default_instance_,
      EscapeConstraint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EscapeConstraint));
  SearchConstraint_descriptor_ = file->message_type(2);
  static const int SearchConstraint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, y_limit_),
  };
  SearchConstraint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchConstraint_descriptor_,
      SearchConstraint::default_instance_,
      SearchConstraint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchConstraint));
  WhirlVel_descriptor_ = file->message_type(3);
  static const int WhirlVel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, angle_x_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, angle_y_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, angle_z_vel_),
  };
  WhirlVel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhirlVel_descriptor_,
      WhirlVel::default_instance_,
      WhirlVel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhirlVel));
  Referee_descriptor_ = file->message_type(4);
  static const int Referee_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, game_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, game_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, game_survivor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, robort_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, robort_heat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, robort_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, robort_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, robort_shoot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, bonus_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, local_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, remote_name_),
  };
  Referee_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Referee_descriptor_,
      Referee::default_instance_,
      Referee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Referee));
  TopicName_descriptor_ = file->message_type(5);
  static const int TopicName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicName, topic_),
  };
  TopicName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicName_descriptor_,
      TopicName::default_instance_,
      TopicName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicName));
  DecisionConfig_descriptor_ = file->message_type(6);
  static const int DecisionConfig_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, simulate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, escape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, buff_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, whirl_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, auxe_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, master_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, wing_bot_task_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, wait_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, square_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, square_y_),
  };
  DecisionConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DecisionConfig_descriptor_,
      DecisionConfig::default_instance_,
      DecisionConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DecisionConfig));
  RobotInfo_descriptor_ = file->message_type(7);
  static const int RobotInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, heat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, bullets_),
  };
  RobotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotInfo_descriptor_,
      RobotInfo::default_instance_,
      RobotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotInfo));
  PunishInfo_descriptor_ = file->message_type(8);
  static const int PunishInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishInfo, on_gimbal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishInfo, on_chassis_),
  };
  PunishInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PunishInfo_descriptor_,
      PunishInfo::default_instance_,
      PunishInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PunishInfo));
  Status_descriptor_ = file->message_type(9);
  static const int Status_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, is_running_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, position_),
  };
  Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Status));
  Status_RunStatus_descriptor_ = Status_descriptor_->enum_type(0);
  MutualInfo_descriptor_ = file->message_type(10);
  static const int MutualInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutualInfo, robort_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutualInfo, punish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutualInfo, status_),
  };
  MutualInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MutualInfo_descriptor_,
      MutualInfo::default_instance_,
      MutualInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutualInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutualInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MutualInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_decision_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EscapeConstraint_descriptor_, &EscapeConstraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchConstraint_descriptor_, &SearchConstraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhirlVel_descriptor_, &WhirlVel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Referee_descriptor_, &Referee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicName_descriptor_, &TopicName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DecisionConfig_descriptor_, &DecisionConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotInfo_descriptor_, &RobotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PunishInfo_descriptor_, &PunishInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Status_descriptor_, &Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MutualInfo_descriptor_, &MutualInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_decision_2eproto() {
  delete Point::default_instance_;
  delete Point_reflection_;
  delete EscapeConstraint::default_instance_;
  delete EscapeConstraint_reflection_;
  delete SearchConstraint::default_instance_;
  delete SearchConstraint_reflection_;
  delete WhirlVel::default_instance_;
  delete WhirlVel_reflection_;
  delete Referee::default_instance_;
  delete Referee_reflection_;
  delete TopicName::default_instance_;
  delete TopicName_reflection_;
  delete DecisionConfig::default_instance_;
  delete DecisionConfig_reflection_;
  delete RobotInfo::default_instance_;
  delete RobotInfo_reflection_;
  delete PunishInfo::default_instance_;
  delete PunishInfo_reflection_;
  delete Status::default_instance_;
  delete Status_reflection_;
  delete MutualInfo::default_instance_;
  delete MutualInfo_reflection_;
}

void protobuf_AddDesc_decision_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016decision.proto\022\020roborts_decision\"R\n\005Po"
    "int\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\014\n\004"
    "roll\030\004 \001(\002\022\r\n\005pitch\030\005 \001(\002\022\013\n\003yaw\030\006 \001(\002\"\304"
    "\001\n\020EscapeConstraint\022\024\n\014left_x_limit\030\001 \001("
    "\002\022\025\n\rright_x_limit\030\002 \001(\002\022\025\n\rrobot_x_limi"
    "t\030\003 \001(\002\022\031\n\021left_random_min_x\030\004 \001(\002\022\031\n\021le"
    "ft_random_max_x\030\005 \001(\002\022\032\n\022right_random_mi"
    "n_x\030\006 \001(\002\022\032\n\022right_random_max_x\030\007 \001(\002\"4\n"
    "\020SearchConstraint\022\017\n\007x_limit\030\001 \001(\002\022\017\n\007y_"
    "limit\030\002 \001(\002\"I\n\010WhirlVel\022\023\n\013angle_x_vel\030\001"
    " \001(\002\022\023\n\013angle_y_vel\030\002 \001(\002\022\023\n\013angle_z_vel"
    "\030\003 \001(\002\"\370\001\n\007Referee\022\023\n\013game_result\030\002 \001(\t\022"
    "\023\n\013game_status\030\001 \001(\t\022\025\n\rgame_survivor\030\003 "
    "\001(\t\022\025\n\rrobort_status\030\004 \001(\t\022\023\n\013robort_hea"
    "t\030\005 \001(\t\022\024\n\014robort_bonus\030\006 \001(\t\022\025\n\rrobort_"
    "damage\030\007 \001(\t\022\024\n\014robort_shoot\030\010 \001(\t\022\024\n\014bo"
    "nus_status\030\t \001(\t\022\022\n\nlocal_name\030\n \001(\t\022\023\n\013"
    "remote_name\030\013 \001(\t\"\032\n\tTopicName\022\r\n\005topic\030"
    "\001 \003(\t\"\372\003\n\016DecisionConfig\022&\n\005point\030\001 \003(\0132"
    "\027.roborts_decision.Point\022\027\n\010simulate\030\002 \001"
    "(\010:\005false\022\025\n\006master\030\003 \001(\010:\005false\022\'\n\006esca"
    "pe\030\004 \003(\0132\027.roborts_decision.Point\022+\n\nbuf"
    "f_point\030\005 \003(\0132\027.roborts_decision.Point\022,"
    "\n\013search_path\030\006 \003(\0132\027.roborts_decision.P"
    "oint\022-\n\twhirl_vel\030\007 \001(\0132\032.roborts_decisi"
    "on.WhirlVel\022)\n\010auxe_bot\030\010 \003(\0132\027.roborts_"
    "decision.Point\022+\n\nmaster_bot\030\t \003(\0132\027.rob"
    "orts_decision.Point\0224\n\023wing_bot_task_poi"
    "nt\030\n \001(\0132\027.roborts_decision.Point\022+\n\nwai"
    "t_point\030\013 \003(\0132\027.roborts_decision.Point\022\020"
    "\n\010square_x\030\014 \003(\002\022\020\n\010square_y\030\r \003(\002\"6\n\tRo"
    "botInfo\022\n\n\002hp\030\001 \001(\005\022\014\n\004heat\030\002 \001(\005\022\017\n\007bul"
    "lets\030\003 \001(\005\"3\n\nPunishInfo\022\021\n\ton_gimbal\030\001 "
    "\001(\010\022\022\n\non_chassis\030\002 \001(\010\"\264\001\n\006Status\022\022\n\nis"
    "_running\030\001 \002(\010\0222\n\006status\030\002 \001(\0162\".roborts"
    "_decision.Status.RunStatus\022)\n\010position\030\003"
    " \001(\0132\027.roborts_decision.Point\"7\n\tRunStat"
    "us\022\t\n\005CHASE\020\001\022\n\n\006ESCAPE\020\002\022\010\n\004BUFF\020\003\022\t\n\005S"
    "HOOT\020\004\"\226\001\n\nMutualInfo\0220\n\013robort_info\030\001 \001"
    "(\0132\033.roborts_decision.RobotInfo\022,\n\006punis"
    "h\030\002 \001(\0132\034.roborts_decision.PunishInfo\022(\n"
    "\006status\030\003 \001(\0132\030.roborts_decision.Status", 1679);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "decision.proto", &protobuf_RegisterTypes);
  Point::default_instance_ = new Point();
  EscapeConstraint::default_instance_ = new EscapeConstraint();
  SearchConstraint::default_instance_ = new SearchConstraint();
  WhirlVel::default_instance_ = new WhirlVel();
  Referee::default_instance_ = new Referee();
  TopicName::default_instance_ = new TopicName();
  DecisionConfig::default_instance_ = new DecisionConfig();
  RobotInfo::default_instance_ = new RobotInfo();
  PunishInfo::default_instance_ = new PunishInfo();
  Status::default_instance_ = new Status();
  MutualInfo::default_instance_ = new MutualInfo();
  Point::default_instance_->InitAsDefaultInstance();
  EscapeConstraint::default_instance_->InitAsDefaultInstance();
  SearchConstraint::default_instance_->InitAsDefaultInstance();
  WhirlVel::default_instance_->InitAsDefaultInstance();
  Referee::default_instance_->InitAsDefaultInstance();
  TopicName::default_instance_->InitAsDefaultInstance();
  DecisionConfig::default_instance_->InitAsDefaultInstance();
  RobotInfo::default_instance_->InitAsDefaultInstance();
  PunishInfo::default_instance_->InitAsDefaultInstance();
  Status::default_instance_->InitAsDefaultInstance();
  MutualInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_decision_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_decision_2eproto {
  StaticDescriptorInitializer_decision_2eproto() {
    protobuf_AddDesc_decision_2eproto();
  }
} static_descriptor_initializer_decision_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
const int Point::kRollFieldNumber;
const int Point::kPitchFieldNumber;
const int Point::kYawFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  roll_ = 0;
  pitch_ = 0;
  yaw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:roborts_decision.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(x_, yaw_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_roll;
        break;
      }

      // optional float roll = 4;
      case 4: {
        if (tag == 37) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_pitch;
        break;
      }

      // optional float pitch = 5;
      case 5: {
        if (tag == 45) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_yaw;
        break;
      }

      // optional float yaw = 6;
      case 6: {
        if (tag == 53) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.Point)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float roll = 4;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->roll(), output);
  }

  // optional float pitch = 5;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pitch(), output);
  }

  // optional float yaw = 6;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->yaw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.Point)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float roll = 4;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->roll(), target);
  }

  // optional float pitch = 5;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pitch(), target);
  }

  // optional float yaw = 6;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->yaw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional float roll = 4;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // optional float pitch = 5;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // optional float yaw = 6;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(roll_, other->roll_);
    std::swap(pitch_, other->pitch_);
    std::swap(yaw_, other->yaw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EscapeConstraint::kLeftXLimitFieldNumber;
const int EscapeConstraint::kRightXLimitFieldNumber;
const int EscapeConstraint::kRobotXLimitFieldNumber;
const int EscapeConstraint::kLeftRandomMinXFieldNumber;
const int EscapeConstraint::kLeftRandomMaxXFieldNumber;
const int EscapeConstraint::kRightRandomMinXFieldNumber;
const int EscapeConstraint::kRightRandomMaxXFieldNumber;
#endif  // !_MSC_VER

EscapeConstraint::EscapeConstraint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.EscapeConstraint)
}

void EscapeConstraint::InitAsDefaultInstance() {
}

EscapeConstraint::EscapeConstraint(const EscapeConstraint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.EscapeConstraint)
}

void EscapeConstraint::SharedCtor() {
  _cached_size_ = 0;
  left_x_limit_ = 0;
  right_x_limit_ = 0;
  robot_x_limit_ = 0;
  left_random_min_x_ = 0;
  left_random_max_x_ = 0;
  right_random_min_x_ = 0;
  right_random_max_x_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EscapeConstraint::~EscapeConstraint() {
  // @@protoc_insertion_point(destructor:roborts_decision.EscapeConstraint)
  SharedDtor();
}

void EscapeConstraint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EscapeConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EscapeConstraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EscapeConstraint_descriptor_;
}

const EscapeConstraint& EscapeConstraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

EscapeConstraint* EscapeConstraint::default_instance_ = NULL;

EscapeConstraint* EscapeConstraint::New() const {
  return new EscapeConstraint;
}

void EscapeConstraint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EscapeConstraint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(left_x_limit_, right_random_max_x_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EscapeConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.EscapeConstraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float left_x_limit = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_x_limit_)));
          set_has_left_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_right_x_limit;
        break;
      }

      // optional float right_x_limit = 2;
      case 2: {
        if (tag == 21) {
         parse_right_x_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_x_limit_)));
          set_has_right_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_robot_x_limit;
        break;
      }

      // optional float robot_x_limit = 3;
      case 3: {
        if (tag == 29) {
         parse_robot_x_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &robot_x_limit_)));
          set_has_robot_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_left_random_min_x;
        break;
      }

      // optional float left_random_min_x = 4;
      case 4: {
        if (tag == 37) {
         parse_left_random_min_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_random_min_x_)));
          set_has_left_random_min_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_left_random_max_x;
        break;
      }

      // optional float left_random_max_x = 5;
      case 5: {
        if (tag == 45) {
         parse_left_random_max_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_random_max_x_)));
          set_has_left_random_max_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_right_random_min_x;
        break;
      }

      // optional float right_random_min_x = 6;
      case 6: {
        if (tag == 53) {
         parse_right_random_min_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_random_min_x_)));
          set_has_right_random_min_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_right_random_max_x;
        break;
      }

      // optional float right_random_max_x = 7;
      case 7: {
        if (tag == 61) {
         parse_right_random_max_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_random_max_x_)));
          set_has_right_random_max_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.EscapeConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.EscapeConstraint)
  return false;
#undef DO_
}

void EscapeConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.EscapeConstraint)
  // optional float left_x_limit = 1;
  if (has_left_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left_x_limit(), output);
  }

  // optional float right_x_limit = 2;
  if (has_right_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->right_x_limit(), output);
  }

  // optional float robot_x_limit = 3;
  if (has_robot_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->robot_x_limit(), output);
  }

  // optional float left_random_min_x = 4;
  if (has_left_random_min_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->left_random_min_x(), output);
  }

  // optional float left_random_max_x = 5;
  if (has_left_random_max_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->left_random_max_x(), output);
  }

  // optional float right_random_min_x = 6;
  if (has_right_random_min_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->right_random_min_x(), output);
  }

  // optional float right_random_max_x = 7;
  if (has_right_random_max_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->right_random_max_x(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.EscapeConstraint)
}

::google::protobuf::uint8* EscapeConstraint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.EscapeConstraint)
  // optional float left_x_limit = 1;
  if (has_left_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left_x_limit(), target);
  }

  // optional float right_x_limit = 2;
  if (has_right_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->right_x_limit(), target);
  }

  // optional float robot_x_limit = 3;
  if (has_robot_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->robot_x_limit(), target);
  }

  // optional float left_random_min_x = 4;
  if (has_left_random_min_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->left_random_min_x(), target);
  }

  // optional float left_random_max_x = 5;
  if (has_left_random_max_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->left_random_max_x(), target);
  }

  // optional float right_random_min_x = 6;
  if (has_right_random_min_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->right_random_min_x(), target);
  }

  // optional float right_random_max_x = 7;
  if (has_right_random_max_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->right_random_max_x(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.EscapeConstraint)
  return target;
}

int EscapeConstraint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float left_x_limit = 1;
    if (has_left_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float right_x_limit = 2;
    if (has_right_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float robot_x_limit = 3;
    if (has_robot_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float left_random_min_x = 4;
    if (has_left_random_min_x()) {
      total_size += 1 + 4;
    }

    // optional float left_random_max_x = 5;
    if (has_left_random_max_x()) {
      total_size += 1 + 4;
    }

    // optional float right_random_min_x = 6;
    if (has_right_random_min_x()) {
      total_size += 1 + 4;
    }

    // optional float right_random_max_x = 7;
    if (has_right_random_max_x()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EscapeConstraint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EscapeConstraint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EscapeConstraint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EscapeConstraint::MergeFrom(const EscapeConstraint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_x_limit()) {
      set_left_x_limit(from.left_x_limit());
    }
    if (from.has_right_x_limit()) {
      set_right_x_limit(from.right_x_limit());
    }
    if (from.has_robot_x_limit()) {
      set_robot_x_limit(from.robot_x_limit());
    }
    if (from.has_left_random_min_x()) {
      set_left_random_min_x(from.left_random_min_x());
    }
    if (from.has_left_random_max_x()) {
      set_left_random_max_x(from.left_random_max_x());
    }
    if (from.has_right_random_min_x()) {
      set_right_random_min_x(from.right_random_min_x());
    }
    if (from.has_right_random_max_x()) {
      set_right_random_max_x(from.right_random_max_x());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EscapeConstraint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EscapeConstraint::CopyFrom(const EscapeConstraint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscapeConstraint::IsInitialized() const {

  return true;
}

void EscapeConstraint::Swap(EscapeConstraint* other) {
  if (other != this) {
    std::swap(left_x_limit_, other->left_x_limit_);
    std::swap(right_x_limit_, other->right_x_limit_);
    std::swap(robot_x_limit_, other->robot_x_limit_);
    std::swap(left_random_min_x_, other->left_random_min_x_);
    std::swap(left_random_max_x_, other->left_random_max_x_);
    std::swap(right_random_min_x_, other->right_random_min_x_);
    std::swap(right_random_max_x_, other->right_random_max_x_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EscapeConstraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EscapeConstraint_descriptor_;
  metadata.reflection = EscapeConstraint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchConstraint::kXLimitFieldNumber;
const int SearchConstraint::kYLimitFieldNumber;
#endif  // !_MSC_VER

SearchConstraint::SearchConstraint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.SearchConstraint)
}

void SearchConstraint::InitAsDefaultInstance() {
}

SearchConstraint::SearchConstraint(const SearchConstraint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.SearchConstraint)
}

void SearchConstraint::SharedCtor() {
  _cached_size_ = 0;
  x_limit_ = 0;
  y_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchConstraint::~SearchConstraint() {
  // @@protoc_insertion_point(destructor:roborts_decision.SearchConstraint)
  SharedDtor();
}

void SearchConstraint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchConstraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchConstraint_descriptor_;
}

const SearchConstraint& SearchConstraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

SearchConstraint* SearchConstraint::default_instance_ = NULL;

SearchConstraint* SearchConstraint::New() const {
  return new SearchConstraint;
}

void SearchConstraint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SearchConstraint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_limit_, y_limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.SearchConstraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x_limit = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_limit_)));
          set_has_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y_limit;
        break;
      }

      // optional float y_limit = 2;
      case 2: {
        if (tag == 21) {
         parse_y_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_limit_)));
          set_has_y_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.SearchConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.SearchConstraint)
  return false;
#undef DO_
}

void SearchConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.SearchConstraint)
  // optional float x_limit = 1;
  if (has_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_limit(), output);
  }

  // optional float y_limit = 2;
  if (has_y_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.SearchConstraint)
}

::google::protobuf::uint8* SearchConstraint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.SearchConstraint)
  // optional float x_limit = 1;
  if (has_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_limit(), target);
  }

  // optional float y_limit = 2;
  if (has_y_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.SearchConstraint)
  return target;
}

int SearchConstraint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x_limit = 1;
    if (has_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float y_limit = 2;
    if (has_y_limit()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchConstraint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchConstraint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchConstraint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchConstraint::MergeFrom(const SearchConstraint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_limit()) {
      set_x_limit(from.x_limit());
    }
    if (from.has_y_limit()) {
      set_y_limit(from.y_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchConstraint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchConstraint::CopyFrom(const SearchConstraint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchConstraint::IsInitialized() const {

  return true;
}

void SearchConstraint::Swap(SearchConstraint* other) {
  if (other != this) {
    std::swap(x_limit_, other->x_limit_);
    std::swap(y_limit_, other->y_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchConstraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchConstraint_descriptor_;
  metadata.reflection = SearchConstraint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WhirlVel::kAngleXVelFieldNumber;
const int WhirlVel::kAngleYVelFieldNumber;
const int WhirlVel::kAngleZVelFieldNumber;
#endif  // !_MSC_VER

WhirlVel::WhirlVel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.WhirlVel)
}

void WhirlVel::InitAsDefaultInstance() {
}

WhirlVel::WhirlVel(const WhirlVel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.WhirlVel)
}

void WhirlVel::SharedCtor() {
  _cached_size_ = 0;
  angle_x_vel_ = 0;
  angle_y_vel_ = 0;
  angle_z_vel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhirlVel::~WhirlVel() {
  // @@protoc_insertion_point(destructor:roborts_decision.WhirlVel)
  SharedDtor();
}

void WhirlVel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WhirlVel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhirlVel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhirlVel_descriptor_;
}

const WhirlVel& WhirlVel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

WhirlVel* WhirlVel::default_instance_ = NULL;

WhirlVel* WhirlVel::New() const {
  return new WhirlVel;
}

void WhirlVel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WhirlVel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(angle_x_vel_, angle_z_vel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhirlVel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.WhirlVel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float angle_x_vel = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_x_vel_)));
          set_has_angle_x_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_angle_y_vel;
        break;
      }

      // optional float angle_y_vel = 2;
      case 2: {
        if (tag == 21) {
         parse_angle_y_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_y_vel_)));
          set_has_angle_y_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_angle_z_vel;
        break;
      }

      // optional float angle_z_vel = 3;
      case 3: {
        if (tag == 29) {
         parse_angle_z_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_z_vel_)));
          set_has_angle_z_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.WhirlVel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.WhirlVel)
  return false;
#undef DO_
}

void WhirlVel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.WhirlVel)
  // optional float angle_x_vel = 1;
  if (has_angle_x_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->angle_x_vel(), output);
  }

  // optional float angle_y_vel = 2;
  if (has_angle_y_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle_y_vel(), output);
  }

  // optional float angle_z_vel = 3;
  if (has_angle_z_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle_z_vel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.WhirlVel)
}

::google::protobuf::uint8* WhirlVel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.WhirlVel)
  // optional float angle_x_vel = 1;
  if (has_angle_x_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->angle_x_vel(), target);
  }

  // optional float angle_y_vel = 2;
  if (has_angle_y_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle_y_vel(), target);
  }

  // optional float angle_z_vel = 3;
  if (has_angle_z_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle_z_vel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.WhirlVel)
  return target;
}

int WhirlVel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float angle_x_vel = 1;
    if (has_angle_x_vel()) {
      total_size += 1 + 4;
    }

    // optional float angle_y_vel = 2;
    if (has_angle_y_vel()) {
      total_size += 1 + 4;
    }

    // optional float angle_z_vel = 3;
    if (has_angle_z_vel()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhirlVel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhirlVel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhirlVel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhirlVel::MergeFrom(const WhirlVel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle_x_vel()) {
      set_angle_x_vel(from.angle_x_vel());
    }
    if (from.has_angle_y_vel()) {
      set_angle_y_vel(from.angle_y_vel());
    }
    if (from.has_angle_z_vel()) {
      set_angle_z_vel(from.angle_z_vel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhirlVel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhirlVel::CopyFrom(const WhirlVel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhirlVel::IsInitialized() const {

  return true;
}

void WhirlVel::Swap(WhirlVel* other) {
  if (other != this) {
    std::swap(angle_x_vel_, other->angle_x_vel_);
    std::swap(angle_y_vel_, other->angle_y_vel_);
    std::swap(angle_z_vel_, other->angle_z_vel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhirlVel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhirlVel_descriptor_;
  metadata.reflection = WhirlVel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Referee::kGameResultFieldNumber;
const int Referee::kGameStatusFieldNumber;
const int Referee::kGameSurvivorFieldNumber;
const int Referee::kRobortStatusFieldNumber;
const int Referee::kRobortHeatFieldNumber;
const int Referee::kRobortBonusFieldNumber;
const int Referee::kRobortDamageFieldNumber;
const int Referee::kRobortShootFieldNumber;
const int Referee::kBonusStatusFieldNumber;
const int Referee::kLocalNameFieldNumber;
const int Referee::kRemoteNameFieldNumber;
#endif  // !_MSC_VER

Referee::Referee()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.Referee)
}

void Referee::InitAsDefaultInstance() {
}

Referee::Referee(const Referee& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.Referee)
}

void Referee::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_survivor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robort_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robort_heat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robort_bonus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robort_damage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robort_shoot_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bonus_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Referee::~Referee() {
  // @@protoc_insertion_point(destructor:roborts_decision.Referee)
  SharedDtor();
}

void Referee::SharedDtor() {
  if (game_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_result_;
  }
  if (game_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_status_;
  }
  if (game_survivor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_survivor_;
  }
  if (robort_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete robort_status_;
  }
  if (robort_heat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete robort_heat_;
  }
  if (robort_bonus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete robort_bonus_;
  }
  if (robort_damage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete robort_damage_;
  }
  if (robort_shoot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete robort_shoot_;
  }
  if (bonus_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bonus_status_;
  }
  if (local_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete local_name_;
  }
  if (remote_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remote_name_;
  }
  if (this != default_instance_) {
  }
}

void Referee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Referee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Referee_descriptor_;
}

const Referee& Referee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

Referee* Referee::default_instance_ = NULL;

Referee* Referee::New() const {
  return new Referee;
}

void Referee::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_game_result()) {
      if (game_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_result_->clear();
      }
    }
    if (has_game_status()) {
      if (game_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_status_->clear();
      }
    }
    if (has_game_survivor()) {
      if (game_survivor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_survivor_->clear();
      }
    }
    if (has_robort_status()) {
      if (robort_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        robort_status_->clear();
      }
    }
    if (has_robort_heat()) {
      if (robort_heat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        robort_heat_->clear();
      }
    }
    if (has_robort_bonus()) {
      if (robort_bonus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        robort_bonus_->clear();
      }
    }
    if (has_robort_damage()) {
      if (robort_damage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        robort_damage_->clear();
      }
    }
    if (has_robort_shoot()) {
      if (robort_shoot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        robort_shoot_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_bonus_status()) {
      if (bonus_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bonus_status_->clear();
      }
    }
    if (has_local_name()) {
      if (local_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        local_name_->clear();
      }
    }
    if (has_remote_name()) {
      if (remote_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remote_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Referee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.Referee)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string game_status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_status().data(), this->game_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game_status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_game_result;
        break;
      }

      // optional string game_result = 2;
      case 2: {
        if (tag == 18) {
         parse_game_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_result().data(), this->game_result().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game_result");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_game_survivor;
        break;
      }

      // optional string game_survivor = 3;
      case 3: {
        if (tag == 26) {
         parse_game_survivor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_survivor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_survivor().data(), this->game_survivor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game_survivor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_robort_status;
        break;
      }

      // optional string robort_status = 4;
      case 4: {
        if (tag == 34) {
         parse_robort_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robort_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robort_status().data(), this->robort_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robort_status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_robort_heat;
        break;
      }

      // optional string robort_heat = 5;
      case 5: {
        if (tag == 42) {
         parse_robort_heat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robort_heat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robort_heat().data(), this->robort_heat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robort_heat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_robort_bonus;
        break;
      }

      // optional string robort_bonus = 6;
      case 6: {
        if (tag == 50) {
         parse_robort_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robort_bonus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robort_bonus().data(), this->robort_bonus().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robort_bonus");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_robort_damage;
        break;
      }

      // optional string robort_damage = 7;
      case 7: {
        if (tag == 58) {
         parse_robort_damage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robort_damage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robort_damage().data(), this->robort_damage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robort_damage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_robort_shoot;
        break;
      }

      // optional string robort_shoot = 8;
      case 8: {
        if (tag == 66) {
         parse_robort_shoot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robort_shoot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robort_shoot().data(), this->robort_shoot().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robort_shoot");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_bonus_status;
        break;
      }

      // optional string bonus_status = 9;
      case 9: {
        if (tag == 74) {
         parse_bonus_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bonus_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bonus_status().data(), this->bonus_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bonus_status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_local_name;
        break;
      }

      // optional string local_name = 10;
      case 10: {
        if (tag == 82) {
         parse_local_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_name().data(), this->local_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "local_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_remote_name;
        break;
      }

      // optional string remote_name = 11;
      case 11: {
        if (tag == 90) {
         parse_remote_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remote_name().data(), this->remote_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remote_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.Referee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.Referee)
  return false;
#undef DO_
}

void Referee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.Referee)
  // optional string game_status = 1;
  if (has_game_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_status().data(), this->game_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->game_status(), output);
  }

  // optional string game_result = 2;
  if (has_game_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_result().data(), this->game_result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_result(), output);
  }

  // optional string game_survivor = 3;
  if (has_game_survivor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_survivor().data(), this->game_survivor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_survivor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->game_survivor(), output);
  }

  // optional string robort_status = 4;
  if (has_robort_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_status().data(), this->robort_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robort_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->robort_status(), output);
  }

  // optional string robort_heat = 5;
  if (has_robort_heat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_heat().data(), this->robort_heat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robort_heat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->robort_heat(), output);
  }

  // optional string robort_bonus = 6;
  if (has_robort_bonus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_bonus().data(), this->robort_bonus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robort_bonus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->robort_bonus(), output);
  }

  // optional string robort_damage = 7;
  if (has_robort_damage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_damage().data(), this->robort_damage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robort_damage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->robort_damage(), output);
  }

  // optional string robort_shoot = 8;
  if (has_robort_shoot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_shoot().data(), this->robort_shoot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robort_shoot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->robort_shoot(), output);
  }

  // optional string bonus_status = 9;
  if (has_bonus_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bonus_status().data(), this->bonus_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bonus_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->bonus_status(), output);
  }

  // optional string local_name = 10;
  if (has_local_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_name().data(), this->local_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "local_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->local_name(), output);
  }

  // optional string remote_name = 11;
  if (has_remote_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remote_name().data(), this->remote_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remote_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->remote_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.Referee)
}

::google::protobuf::uint8* Referee::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.Referee)
  // optional string game_status = 1;
  if (has_game_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_status().data(), this->game_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->game_status(), target);
  }

  // optional string game_result = 2;
  if (has_game_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_result().data(), this->game_result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_result(), target);
  }

  // optional string game_survivor = 3;
  if (has_game_survivor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_survivor().data(), this->game_survivor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_survivor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->game_survivor(), target);
  }

  // optional string robort_status = 4;
  if (has_robort_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_status().data(), this->robort_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robort_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->robort_status(), target);
  }

  // optional string robort_heat = 5;
  if (has_robort_heat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_heat().data(), this->robort_heat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robort_heat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->robort_heat(), target);
  }

  // optional string robort_bonus = 6;
  if (has_robort_bonus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_bonus().data(), this->robort_bonus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robort_bonus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->robort_bonus(), target);
  }

  // optional string robort_damage = 7;
  if (has_robort_damage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_damage().data(), this->robort_damage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robort_damage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->robort_damage(), target);
  }

  // optional string robort_shoot = 8;
  if (has_robort_shoot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_shoot().data(), this->robort_shoot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robort_shoot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->robort_shoot(), target);
  }

  // optional string bonus_status = 9;
  if (has_bonus_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bonus_status().data(), this->bonus_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bonus_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->bonus_status(), target);
  }

  // optional string local_name = 10;
  if (has_local_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_name().data(), this->local_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "local_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->local_name(), target);
  }

  // optional string remote_name = 11;
  if (has_remote_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remote_name().data(), this->remote_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remote_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->remote_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.Referee)
  return target;
}

int Referee::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string game_result = 2;
    if (has_game_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_result());
    }

    // optional string game_status = 1;
    if (has_game_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_status());
    }

    // optional string game_survivor = 3;
    if (has_game_survivor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_survivor());
    }

    // optional string robort_status = 4;
    if (has_robort_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robort_status());
    }

    // optional string robort_heat = 5;
    if (has_robort_heat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robort_heat());
    }

    // optional string robort_bonus = 6;
    if (has_robort_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robort_bonus());
    }

    // optional string robort_damage = 7;
    if (has_robort_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robort_damage());
    }

    // optional string robort_shoot = 8;
    if (has_robort_shoot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robort_shoot());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string bonus_status = 9;
    if (has_bonus_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bonus_status());
    }

    // optional string local_name = 10;
    if (has_local_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_name());
    }

    // optional string remote_name = 11;
    if (has_remote_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remote_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Referee::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Referee* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Referee*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Referee::MergeFrom(const Referee& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_result()) {
      set_game_result(from.game_result());
    }
    if (from.has_game_status()) {
      set_game_status(from.game_status());
    }
    if (from.has_game_survivor()) {
      set_game_survivor(from.game_survivor());
    }
    if (from.has_robort_status()) {
      set_robort_status(from.robort_status());
    }
    if (from.has_robort_heat()) {
      set_robort_heat(from.robort_heat());
    }
    if (from.has_robort_bonus()) {
      set_robort_bonus(from.robort_bonus());
    }
    if (from.has_robort_damage()) {
      set_robort_damage(from.robort_damage());
    }
    if (from.has_robort_shoot()) {
      set_robort_shoot(from.robort_shoot());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bonus_status()) {
      set_bonus_status(from.bonus_status());
    }
    if (from.has_local_name()) {
      set_local_name(from.local_name());
    }
    if (from.has_remote_name()) {
      set_remote_name(from.remote_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Referee::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Referee::CopyFrom(const Referee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Referee::IsInitialized() const {

  return true;
}

void Referee::Swap(Referee* other) {
  if (other != this) {
    std::swap(game_result_, other->game_result_);
    std::swap(game_status_, other->game_status_);
    std::swap(game_survivor_, other->game_survivor_);
    std::swap(robort_status_, other->robort_status_);
    std::swap(robort_heat_, other->robort_heat_);
    std::swap(robort_bonus_, other->robort_bonus_);
    std::swap(robort_damage_, other->robort_damage_);
    std::swap(robort_shoot_, other->robort_shoot_);
    std::swap(bonus_status_, other->bonus_status_);
    std::swap(local_name_, other->local_name_);
    std::swap(remote_name_, other->remote_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Referee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Referee_descriptor_;
  metadata.reflection = Referee_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TopicName::kTopicFieldNumber;
#endif  // !_MSC_VER

TopicName::TopicName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.TopicName)
}

void TopicName::InitAsDefaultInstance() {
}

TopicName::TopicName(const TopicName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.TopicName)
}

void TopicName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicName::~TopicName() {
  // @@protoc_insertion_point(destructor:roborts_decision.TopicName)
  SharedDtor();
}

void TopicName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopicName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicName_descriptor_;
}

const TopicName& TopicName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

TopicName* TopicName::default_instance_ = NULL;

TopicName* TopicName::New() const {
  return new TopicName;
}

void TopicName::Clear() {
  topic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.TopicName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic = 1;
      case 1: {
        if (tag == 10) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic(this->topic_size() - 1).data(),
            this->topic(this->topic_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_topic;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.TopicName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.TopicName)
  return false;
#undef DO_
}

void TopicName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.TopicName)
  // repeated string topic = 1;
  for (int i = 0; i < this->topic_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->topic(i).data(), this->topic(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "topic");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.TopicName)
}

::google::protobuf::uint8* TopicName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.TopicName)
  // repeated string topic = 1;
  for (int i = 0; i < this->topic_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic(i).data(), this->topic(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.TopicName)
  return target;
}

int TopicName::ByteSize() const {
  int total_size = 0;

  // repeated string topic = 1;
  total_size += 1 * this->topic_size();
  for (int i = 0; i < this->topic_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicName::MergeFrom(const TopicName& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_.MergeFrom(from.topic_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicName::CopyFrom(const TopicName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicName::IsInitialized() const {

  return true;
}

void TopicName::Swap(TopicName* other) {
  if (other != this) {
    topic_.Swap(&other->topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicName_descriptor_;
  metadata.reflection = TopicName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DecisionConfig::kPointFieldNumber;
const int DecisionConfig::kSimulateFieldNumber;
const int DecisionConfig::kMasterFieldNumber;
const int DecisionConfig::kEscapeFieldNumber;
const int DecisionConfig::kBuffPointFieldNumber;
const int DecisionConfig::kSearchPathFieldNumber;
const int DecisionConfig::kWhirlVelFieldNumber;
const int DecisionConfig::kAuxeBotFieldNumber;
const int DecisionConfig::kMasterBotFieldNumber;
const int DecisionConfig::kWingBotTaskPointFieldNumber;
const int DecisionConfig::kWaitPointFieldNumber;
const int DecisionConfig::kSquareXFieldNumber;
const int DecisionConfig::kSquareYFieldNumber;
#endif  // !_MSC_VER

DecisionConfig::DecisionConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.DecisionConfig)
}

void DecisionConfig::InitAsDefaultInstance() {
  whirl_vel_ = const_cast< ::roborts_decision::WhirlVel*>(&::roborts_decision::WhirlVel::default_instance());
  wing_bot_task_point_ = const_cast< ::roborts_decision::Point*>(&::roborts_decision::Point::default_instance());
}

DecisionConfig::DecisionConfig(const DecisionConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.DecisionConfig)
}

void DecisionConfig::SharedCtor() {
  _cached_size_ = 0;
  simulate_ = false;
  master_ = false;
  whirl_vel_ = NULL;
  wing_bot_task_point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecisionConfig::~DecisionConfig() {
  // @@protoc_insertion_point(destructor:roborts_decision.DecisionConfig)
  SharedDtor();
}

void DecisionConfig::SharedDtor() {
  if (this != default_instance_) {
    delete whirl_vel_;
    delete wing_bot_task_point_;
  }
}

void DecisionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecisionConfig_descriptor_;
}

const DecisionConfig& DecisionConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

DecisionConfig* DecisionConfig::default_instance_ = NULL;

DecisionConfig* DecisionConfig::New() const {
  return new DecisionConfig;
}

void DecisionConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DecisionConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 70) {
    ZR_(simulate_, master_);
    if (has_whirl_vel()) {
      if (whirl_vel_ != NULL) whirl_vel_->::roborts_decision::WhirlVel::Clear();
    }
  }
  if (has_wing_bot_task_point()) {
    if (wing_bot_task_point_ != NULL) wing_bot_task_point_->::roborts_decision::Point::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  point_.Clear();
  escape_.Clear();
  buff_point_.Clear();
  search_path_.Clear();
  auxe_bot_.Clear();
  master_bot_.Clear();
  wait_point_.Clear();
  square_x_.Clear();
  square_y_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DecisionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.DecisionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .roborts_decision.Point point = 1;
      case 1: {
        if (tag == 10) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_point;
        if (input->ExpectTag(16)) goto parse_simulate;
        break;
      }

      // optional bool simulate = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_simulate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &simulate_)));
          set_has_simulate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_master;
        break;
      }

      // optional bool master = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &master_)));
          set_has_master();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_escape;
        break;
      }

      // repeated .roborts_decision.Point escape = 4;
      case 4: {
        if (tag == 34) {
         parse_escape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_escape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_escape;
        if (input->ExpectTag(42)) goto parse_buff_point;
        break;
      }

      // repeated .roborts_decision.Point buff_point = 5;
      case 5: {
        if (tag == 42) {
         parse_buff_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_buff_point;
        if (input->ExpectTag(50)) goto parse_search_path;
        break;
      }

      // repeated .roborts_decision.Point search_path = 6;
      case 6: {
        if (tag == 50) {
         parse_search_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_search_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_search_path;
        if (input->ExpectTag(58)) goto parse_whirl_vel;
        break;
      }

      // optional .roborts_decision.WhirlVel whirl_vel = 7;
      case 7: {
        if (tag == 58) {
         parse_whirl_vel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_whirl_vel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_auxe_bot;
        break;
      }

      // repeated .roborts_decision.Point auxe_bot = 8;
      case 8: {
        if (tag == 66) {
         parse_auxe_bot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_auxe_bot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_auxe_bot;
        if (input->ExpectTag(74)) goto parse_master_bot;
        break;
      }

      // repeated .roborts_decision.Point master_bot = 9;
      case 9: {
        if (tag == 74) {
         parse_master_bot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_master_bot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_master_bot;
        if (input->ExpectTag(82)) goto parse_wing_bot_task_point;
        break;
      }

      // optional .roborts_decision.Point wing_bot_task_point = 10;
      case 10: {
        if (tag == 82) {
         parse_wing_bot_task_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wing_bot_task_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_wait_point;
        break;
      }

      // repeated .roborts_decision.Point wait_point = 11;
      case 11: {
        if (tag == 90) {
         parse_wait_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wait_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_wait_point;
        if (input->ExpectTag(101)) goto parse_square_x;
        break;
      }

      // repeated float square_x = 12;
      case 12: {
        if (tag == 101) {
         parse_square_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 101, input, this->mutable_square_x())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_square_x())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_square_x;
        if (input->ExpectTag(109)) goto parse_square_y;
        break;
      }

      // repeated float square_y = 13;
      case 13: {
        if (tag == 109) {
         parse_square_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 109, input, this->mutable_square_y())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_square_y())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_square_y;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.DecisionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.DecisionConfig)
  return false;
#undef DO_
}

void DecisionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.DecisionConfig)
  // repeated .roborts_decision.Point point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  // optional bool simulate = 2 [default = false];
  if (has_simulate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->simulate(), output);
  }

  // optional bool master = 3 [default = false];
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->master(), output);
  }

  // repeated .roborts_decision.Point escape = 4;
  for (int i = 0; i < this->escape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->escape(i), output);
  }

  // repeated .roborts_decision.Point buff_point = 5;
  for (int i = 0; i < this->buff_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->buff_point(i), output);
  }

  // repeated .roborts_decision.Point search_path = 6;
  for (int i = 0; i < this->search_path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->search_path(i), output);
  }

  // optional .roborts_decision.WhirlVel whirl_vel = 7;
  if (has_whirl_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->whirl_vel(), output);
  }

  // repeated .roborts_decision.Point auxe_bot = 8;
  for (int i = 0; i < this->auxe_bot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->auxe_bot(i), output);
  }

  // repeated .roborts_decision.Point master_bot = 9;
  for (int i = 0; i < this->master_bot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->master_bot(i), output);
  }

  // optional .roborts_decision.Point wing_bot_task_point = 10;
  if (has_wing_bot_task_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->wing_bot_task_point(), output);
  }

  // repeated .roborts_decision.Point wait_point = 11;
  for (int i = 0; i < this->wait_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->wait_point(i), output);
  }

  // repeated float square_x = 12;
  for (int i = 0; i < this->square_x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      12, this->square_x(i), output);
  }

  // repeated float square_y = 13;
  for (int i = 0; i < this->square_y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      13, this->square_y(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.DecisionConfig)
}

::google::protobuf::uint8* DecisionConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.DecisionConfig)
  // repeated .roborts_decision.Point point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(i), target);
  }

  // optional bool simulate = 2 [default = false];
  if (has_simulate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->simulate(), target);
  }

  // optional bool master = 3 [default = false];
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->master(), target);
  }

  // repeated .roborts_decision.Point escape = 4;
  for (int i = 0; i < this->escape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->escape(i), target);
  }

  // repeated .roborts_decision.Point buff_point = 5;
  for (int i = 0; i < this->buff_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->buff_point(i), target);
  }

  // repeated .roborts_decision.Point search_path = 6;
  for (int i = 0; i < this->search_path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->search_path(i), target);
  }

  // optional .roborts_decision.WhirlVel whirl_vel = 7;
  if (has_whirl_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->whirl_vel(), target);
  }

  // repeated .roborts_decision.Point auxe_bot = 8;
  for (int i = 0; i < this->auxe_bot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->auxe_bot(i), target);
  }

  // repeated .roborts_decision.Point master_bot = 9;
  for (int i = 0; i < this->master_bot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->master_bot(i), target);
  }

  // optional .roborts_decision.Point wing_bot_task_point = 10;
  if (has_wing_bot_task_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->wing_bot_task_point(), target);
  }

  // repeated .roborts_decision.Point wait_point = 11;
  for (int i = 0; i < this->wait_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->wait_point(i), target);
  }

  // repeated float square_x = 12;
  for (int i = 0; i < this->square_x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(12, this->square_x(i), target);
  }

  // repeated float square_y = 13;
  for (int i = 0; i < this->square_y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(13, this->square_y(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.DecisionConfig)
  return target;
}

int DecisionConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool simulate = 2 [default = false];
    if (has_simulate()) {
      total_size += 1 + 1;
    }

    // optional bool master = 3 [default = false];
    if (has_master()) {
      total_size += 1 + 1;
    }

    // optional .roborts_decision.WhirlVel whirl_vel = 7;
    if (has_whirl_vel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->whirl_vel());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .roborts_decision.Point wing_bot_task_point = 10;
    if (has_wing_bot_task_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wing_bot_task_point());
    }

  }
  // repeated .roborts_decision.Point point = 1;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  // repeated .roborts_decision.Point escape = 4;
  total_size += 1 * this->escape_size();
  for (int i = 0; i < this->escape_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->escape(i));
  }

  // repeated .roborts_decision.Point buff_point = 5;
  total_size += 1 * this->buff_point_size();
  for (int i = 0; i < this->buff_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_point(i));
  }

  // repeated .roborts_decision.Point search_path = 6;
  total_size += 1 * this->search_path_size();
  for (int i = 0; i < this->search_path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_path(i));
  }

  // repeated .roborts_decision.Point auxe_bot = 8;
  total_size += 1 * this->auxe_bot_size();
  for (int i = 0; i < this->auxe_bot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->auxe_bot(i));
  }

  // repeated .roborts_decision.Point master_bot = 9;
  total_size += 1 * this->master_bot_size();
  for (int i = 0; i < this->master_bot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->master_bot(i));
  }

  // repeated .roborts_decision.Point wait_point = 11;
  total_size += 1 * this->wait_point_size();
  for (int i = 0; i < this->wait_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wait_point(i));
  }

  // repeated float square_x = 12;
  {
    int data_size = 0;
    data_size = 4 * this->square_x_size();
    total_size += 1 * this->square_x_size() + data_size;
  }

  // repeated float square_y = 13;
  {
    int data_size = 0;
    data_size = 4 * this->square_y_size();
    total_size += 1 * this->square_y_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DecisionConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DecisionConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DecisionConfig::MergeFrom(const DecisionConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  escape_.MergeFrom(from.escape_);
  buff_point_.MergeFrom(from.buff_point_);
  search_path_.MergeFrom(from.search_path_);
  auxe_bot_.MergeFrom(from.auxe_bot_);
  master_bot_.MergeFrom(from.master_bot_);
  wait_point_.MergeFrom(from.wait_point_);
  square_x_.MergeFrom(from.square_x_);
  square_y_.MergeFrom(from.square_y_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_simulate()) {
      set_simulate(from.simulate());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
    if (from.has_whirl_vel()) {
      mutable_whirl_vel()->::roborts_decision::WhirlVel::MergeFrom(from.whirl_vel());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_wing_bot_task_point()) {
      mutable_wing_bot_task_point()->::roborts_decision::Point::MergeFrom(from.wing_bot_task_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DecisionConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionConfig::CopyFrom(const DecisionConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionConfig::IsInitialized() const {

  return true;
}

void DecisionConfig::Swap(DecisionConfig* other) {
  if (other != this) {
    point_.Swap(&other->point_);
    std::swap(simulate_, other->simulate_);
    std::swap(master_, other->master_);
    escape_.Swap(&other->escape_);
    buff_point_.Swap(&other->buff_point_);
    search_path_.Swap(&other->search_path_);
    std::swap(whirl_vel_, other->whirl_vel_);
    auxe_bot_.Swap(&other->auxe_bot_);
    master_bot_.Swap(&other->master_bot_);
    std::swap(wing_bot_task_point_, other->wing_bot_task_point_);
    wait_point_.Swap(&other->wait_point_);
    square_x_.Swap(&other->square_x_);
    square_y_.Swap(&other->square_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DecisionConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecisionConfig_descriptor_;
  metadata.reflection = DecisionConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotInfo::kHpFieldNumber;
const int RobotInfo::kHeatFieldNumber;
const int RobotInfo::kBulletsFieldNumber;
#endif  // !_MSC_VER

RobotInfo::RobotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.RobotInfo)
}

void RobotInfo::InitAsDefaultInstance() {
}

RobotInfo::RobotInfo(const RobotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.RobotInfo)
}

void RobotInfo::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0;
  heat_ = 0;
  bullets_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotInfo::~RobotInfo() {
  // @@protoc_insertion_point(destructor:roborts_decision.RobotInfo)
  SharedDtor();
}

void RobotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotInfo_descriptor_;
}

const RobotInfo& RobotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

RobotInfo* RobotInfo::default_instance_ = NULL;

RobotInfo* RobotInfo::New() const {
  return new RobotInfo;
}

void RobotInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RobotInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hp_, bullets_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.RobotInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heat;
        break;
      }

      // optional int32 heat = 2;
      case 2: {
        if (tag == 16) {
         parse_heat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heat_)));
          set_has_heat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bullets;
        break;
      }

      // optional int32 bullets = 3;
      case 3: {
        if (tag == 24) {
         parse_bullets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullets_)));
          set_has_bullets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.RobotInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.RobotInfo)
  return false;
#undef DO_
}

void RobotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.RobotInfo)
  // optional int32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hp(), output);
  }

  // optional int32 heat = 2;
  if (has_heat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->heat(), output);
  }

  // optional int32 bullets = 3;
  if (has_bullets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bullets(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.RobotInfo)
}

::google::protobuf::uint8* RobotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.RobotInfo)
  // optional int32 hp = 1;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hp(), target);
  }

  // optional int32 heat = 2;
  if (has_heat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->heat(), target);
  }

  // optional int32 bullets = 3;
  if (has_bullets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bullets(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.RobotInfo)
  return target;
}

int RobotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 heat = 2;
    if (has_heat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heat());
    }

    // optional int32 bullets = 3;
    if (has_bullets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotInfo::MergeFrom(const RobotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_heat()) {
      set_heat(from.heat());
    }
    if (from.has_bullets()) {
      set_bullets(from.bullets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotInfo::CopyFrom(const RobotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotInfo::IsInitialized() const {

  return true;
}

void RobotInfo::Swap(RobotInfo* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(heat_, other->heat_);
    std::swap(bullets_, other->bullets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotInfo_descriptor_;
  metadata.reflection = RobotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PunishInfo::kOnGimbalFieldNumber;
const int PunishInfo::kOnChassisFieldNumber;
#endif  // !_MSC_VER

PunishInfo::PunishInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.PunishInfo)
}

void PunishInfo::InitAsDefaultInstance() {
}

PunishInfo::PunishInfo(const PunishInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.PunishInfo)
}

void PunishInfo::SharedCtor() {
  _cached_size_ = 0;
  on_gimbal_ = false;
  on_chassis_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PunishInfo::~PunishInfo() {
  // @@protoc_insertion_point(destructor:roborts_decision.PunishInfo)
  SharedDtor();
}

void PunishInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PunishInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PunishInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PunishInfo_descriptor_;
}

const PunishInfo& PunishInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

PunishInfo* PunishInfo::default_instance_ = NULL;

PunishInfo* PunishInfo::New() const {
  return new PunishInfo;
}

void PunishInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PunishInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(on_gimbal_, on_chassis_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PunishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.PunishInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool on_gimbal = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_gimbal_)));
          set_has_on_gimbal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_on_chassis;
        break;
      }

      // optional bool on_chassis = 2;
      case 2: {
        if (tag == 16) {
         parse_on_chassis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_chassis_)));
          set_has_on_chassis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.PunishInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.PunishInfo)
  return false;
#undef DO_
}

void PunishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.PunishInfo)
  // optional bool on_gimbal = 1;
  if (has_on_gimbal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->on_gimbal(), output);
  }

  // optional bool on_chassis = 2;
  if (has_on_chassis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->on_chassis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.PunishInfo)
}

::google::protobuf::uint8* PunishInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.PunishInfo)
  // optional bool on_gimbal = 1;
  if (has_on_gimbal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->on_gimbal(), target);
  }

  // optional bool on_chassis = 2;
  if (has_on_chassis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->on_chassis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.PunishInfo)
  return target;
}

int PunishInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool on_gimbal = 1;
    if (has_on_gimbal()) {
      total_size += 1 + 1;
    }

    // optional bool on_chassis = 2;
    if (has_on_chassis()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PunishInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PunishInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PunishInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PunishInfo::MergeFrom(const PunishInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_on_gimbal()) {
      set_on_gimbal(from.on_gimbal());
    }
    if (from.has_on_chassis()) {
      set_on_chassis(from.on_chassis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PunishInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PunishInfo::CopyFrom(const PunishInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PunishInfo::IsInitialized() const {

  return true;
}

void PunishInfo::Swap(PunishInfo* other) {
  if (other != this) {
    std::swap(on_gimbal_, other->on_gimbal_);
    std::swap(on_chassis_, other->on_chassis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PunishInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PunishInfo_descriptor_;
  metadata.reflection = PunishInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Status_RunStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_RunStatus_descriptor_;
}
bool Status_RunStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Status_RunStatus Status::CHASE;
const Status_RunStatus Status::ESCAPE;
const Status_RunStatus Status::BUFF;
const Status_RunStatus Status::SHOOT;
const Status_RunStatus Status::RunStatus_MIN;
const Status_RunStatus Status::RunStatus_MAX;
const int Status::RunStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Status::kIsRunningFieldNumber;
const int Status::kStatusFieldNumber;
const int Status::kPositionFieldNumber;
#endif  // !_MSC_VER

Status::Status()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.Status)
}

void Status::InitAsDefaultInstance() {
  position_ = const_cast< ::roborts_decision::Point*>(&::roborts_decision::Point::default_instance());
}

Status::Status(const Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.Status)
}

void Status::SharedCtor() {
  _cached_size_ = 0;
  is_running_ = false;
  status_ = 1;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:roborts_decision.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New() const {
  return new Status;
}

void Status::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    is_running_ = false;
    status_ = 1;
    if (has_position()) {
      if (position_ != NULL) position_->::roborts_decision::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_running = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_running_)));
          set_has_is_running();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .roborts_decision.Status.RunStatus status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::roborts_decision::Status_RunStatus_IsValid(value)) {
            set_status(static_cast< ::roborts_decision::Status_RunStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // optional .roborts_decision.Point position = 3;
      case 3: {
        if (tag == 26) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.Status)
  // required bool is_running = 1;
  if (has_is_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_running(), output);
  }

  // optional .roborts_decision.Status.RunStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional .roborts_decision.Point position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.Status)
}

::google::protobuf::uint8* Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.Status)
  // required bool is_running = 1;
  if (has_is_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_running(), target);
  }

  // optional .roborts_decision.Status.RunStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional .roborts_decision.Point position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.Status)
  return target;
}

int Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_running = 1;
    if (has_is_running()) {
      total_size += 1 + 1;
    }

    // optional .roborts_decision.Status.RunStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .roborts_decision.Point position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_running()) {
      set_is_running(from.is_running());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_position()) {
      mutable_position()->::roborts_decision::Point::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Status::Swap(Status* other) {
  if (other != this) {
    std::swap(is_running_, other->is_running_);
    std::swap(status_, other->status_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MutualInfo::kRobortInfoFieldNumber;
const int MutualInfo::kPunishFieldNumber;
const int MutualInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

MutualInfo::MutualInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.MutualInfo)
}

void MutualInfo::InitAsDefaultInstance() {
  robort_info_ = const_cast< ::roborts_decision::RobotInfo*>(&::roborts_decision::RobotInfo::default_instance());
  punish_ = const_cast< ::roborts_decision::PunishInfo*>(&::roborts_decision::PunishInfo::default_instance());
  status_ = const_cast< ::roborts_decision::Status*>(&::roborts_decision::Status::default_instance());
}

MutualInfo::MutualInfo(const MutualInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.MutualInfo)
}

void MutualInfo::SharedCtor() {
  _cached_size_ = 0;
  robort_info_ = NULL;
  punish_ = NULL;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MutualInfo::~MutualInfo() {
  // @@protoc_insertion_point(destructor:roborts_decision.MutualInfo)
  SharedDtor();
}

void MutualInfo::SharedDtor() {
  if (this != default_instance_) {
    delete robort_info_;
    delete punish_;
    delete status_;
  }
}

void MutualInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutualInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutualInfo_descriptor_;
}

const MutualInfo& MutualInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

MutualInfo* MutualInfo::default_instance_ = NULL;

MutualInfo* MutualInfo::New() const {
  return new MutualInfo;
}

void MutualInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_robort_info()) {
      if (robort_info_ != NULL) robort_info_->::roborts_decision::RobotInfo::Clear();
    }
    if (has_punish()) {
      if (punish_ != NULL) punish_->::roborts_decision::PunishInfo::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::roborts_decision::Status::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MutualInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.MutualInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .roborts_decision.RobotInfo robort_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_robort_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_punish;
        break;
      }

      // optional .roborts_decision.PunishInfo punish = 2;
      case 2: {
        if (tag == 18) {
         parse_punish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_punish()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // optional .roborts_decision.Status status = 3;
      case 3: {
        if (tag == 26) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.MutualInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.MutualInfo)
  return false;
#undef DO_
}

void MutualInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.MutualInfo)
  // optional .roborts_decision.RobotInfo robort_info = 1;
  if (has_robort_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->robort_info(), output);
  }

  // optional .roborts_decision.PunishInfo punish = 2;
  if (has_punish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->punish(), output);
  }

  // optional .roborts_decision.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.MutualInfo)
}

::google::protobuf::uint8* MutualInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.MutualInfo)
  // optional .roborts_decision.RobotInfo robort_info = 1;
  if (has_robort_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->robort_info(), target);
  }

  // optional .roborts_decision.PunishInfo punish = 2;
  if (has_punish()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->punish(), target);
  }

  // optional .roborts_decision.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.MutualInfo)
  return target;
}

int MutualInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .roborts_decision.RobotInfo robort_info = 1;
    if (has_robort_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robort_info());
    }

    // optional .roborts_decision.PunishInfo punish = 2;
    if (has_punish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->punish());
    }

    // optional .roborts_decision.Status status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutualInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MutualInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MutualInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MutualInfo::MergeFrom(const MutualInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robort_info()) {
      mutable_robort_info()->::roborts_decision::RobotInfo::MergeFrom(from.robort_info());
    }
    if (from.has_punish()) {
      mutable_punish()->::roborts_decision::PunishInfo::MergeFrom(from.punish());
    }
    if (from.has_status()) {
      mutable_status()->::roborts_decision::Status::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MutualInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutualInfo::CopyFrom(const MutualInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutualInfo::IsInitialized() const {

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void MutualInfo::Swap(MutualInfo* other) {
  if (other != this) {
    std::swap(robort_info_, other->robort_info_);
    std::swap(punish_, other->punish_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MutualInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutualInfo_descriptor_;
  metadata.reflection = MutualInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_decision

// @@protoc_insertion_point(global_scope)
